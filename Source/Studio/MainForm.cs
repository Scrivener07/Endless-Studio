using Studio.EntityFramework;
using System;
using System.Data.Entity;
using System.Linq;
using System.Windows.Forms;


namespace Studio
{
	public partial class MainForm : Form
	{
		EntityContext _context;


		public MainForm()
		{
			InitializeComponent();
		}


		private void OnLoad(object sender, EventArgs e)
		{
			_context = new EntityContext();

			// Call the Load method to get the data for the given DbSet from the database. 
			// The data is materialized as entities. The entities are managed by the DbContext instance. 
			_context.Categories.Load();

			// Bind the categoryBindingSource.DataSource to 
			// all the Unchanged, Modified and Added Category objects that 
			// are currently tracked by the DbContext.
			// Note that we need to call ToBindingList() on the 
			// ObservableCollection<TEntity> returned by
			// the DbSet.Local property to get the BindingList<T>
			// in order to facilitate two-way binding in WinForms.
			this.categoryBindingSource.DataSource = _context.Categories.Local.ToBindingList();
		}


		private void OnFormClosing(object sender, FormClosingEventArgs e)
		{
			this._context.Dispose();
		}


		private void categoryBindingNavigatorSaveItem_Click_1(object sender, EventArgs e)
		{
			this.Validate();

			// Currently, the Entity Framework doesn’t mark the entities 
			// that are removed from a navigation property (in our example the Products)
			// as deleted in the context. 
			// The following code uses LINQ to Objects against the Local collection 
			// to find all products and marks any that do not have
			// a Category reference as deleted. 
			// The ToList call is required because otherwise 
			// the collection will be modified 
			// by the Remove call while it is being enumerated. 
			// In most other situations you can do LINQ to Objects directly 
			// against the Local property without using ToList first.
			foreach (var product in _context.Products.Local.ToList())
			{
				if (product.Category == null)
				{
					_context.Products.Remove(product);
				}
			}

			// Save the changes to the database.
			this._context.SaveChanges();

			// Refresh the controls to show the values         
			// that were generated by the database.
			this.categoryDataGridView.Refresh();
			this.productsDataGridView.Refresh();
		}


	}
}
